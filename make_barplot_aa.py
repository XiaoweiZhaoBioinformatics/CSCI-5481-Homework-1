import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import os
import sys
import warnings
warnings.filterwarnings("ignore", category=FutureWarning)

# The following codon table is modified from https://gist.github.com/juanfal/09d7fb53bd367742127e17284b9c47bf
codontab = {
    'TCA': 'Ser',    # Serina
    'TCC': 'Ser',    # Serina
    'TCG': 'Ser',    # Serina
    'TCT': 'Ser',    # Serina
    'AGC': 'Ser',    # Serina
    'AGT': 'Ser',    # Serina
    'TTC': 'Phe',    # Fenilalanina
    'TTT': 'Phe',    # Fenilalanina
    'TTA': 'Leu',    # Leucina
    'TTG': 'Leu',    # Leucina
    'TAC': 'Tyr',    # Tirosina
    'TAT': 'Tyr',    # Tirosina
    'TAA': 'Stp',    # Stop
    'TAG': 'Stp',    # Stop
    'TGC': 'Cys',    # Cisteina
    'TGT': 'Cys',    # Cisteina
    'TGA': 'Stp',    # Stop
    'TGG': 'Trp',    # Triptofano
    'CTA': 'Leu',    # Leucina
    'CTC': 'Leu',    # Leucina
    'CTG': 'Leu',    # Leucina
    'CTT': 'Leu',    # Leucina
    'CCA': 'Pro',    # Prolina
    'CCC': 'Pro',    # Prolina
    'CCG': 'Pro',    # Prolina
    'CCT': 'Pro',    # Prolina
    'CAC': 'His',    # Histidina
    'CAT': 'His',    # Histidina
    'CAA': 'Gln',    # Glutamina
    'CAG': 'Gln',    # Glutamina
    'CGA': 'Arg',    # Arginina
    'CGC': 'Arg',    # Arginina
    'CGG': 'Arg',    # Arginina
    'CGT': 'Arg',    # Arginina
    'ATA': 'Ile',    # Isoleucina
    'ATC': 'Ile',    # Isoleucina
    'ATT': 'Ile',    # Isoleucina
    'ATG': 'Met',    # Methionina
    'ACA': 'Thr',    # Treonina
    'ACC': 'Thr',    # Treonina
    'ACG': 'Thr',    # Treonina
    'ACT': 'Thr',    # Treonina
    'AAC': 'Asn',    # Asparagina
    'AAT': 'Asn',    # Asparagina
    'AAA': 'Lys',    # Lisina
    'AAG': 'Lys',    # Lisina
    'AGA': 'Arg',    # Arginina
    'AGG': 'Arg',    # Arginina
    'GTA': 'Val',    # Valina
    'GTC': 'Val',    # Valina
    'GTG': 'Val',    # Valina
    'GTT': 'Val',    # Valina
    'GCA': 'Ala',    # Alanina
    'GCC': 'Ala',    # Alanina
    'GCG': 'Ala',    # Alanina
    'GCT': 'Ala',    # Alanina
    'GAC': 'Asp',    # Acido Aspartico
    'GAT': 'Asp',    # Acido Aspartico
    'GAA': 'Glu',    # Acido Glutamico
    'GAG': 'Glu',    # Acido Glutamico
    'GGA': 'Gly',    # Glicina
    'GGC': 'Gly',    # Glicina
    'GGG': 'Gly',    # Glicina
    'GGT': 'Gly'     # Glicina
}

def convert_codon(csv_file):

    # Read the csv file of count table
    df = pd.read_csv(csv_file, header = None, names = ['codon', 'counts'])
    
    # This line of code is derived from ChatGPT. This ensures that the amino_acid column is of the object dtype so it can take strings.
    df['amino_acid'] = pd.Series(dtype = 'object')
    
    # Set an empty dictionary to store the amino acid results
    aa_count_table = {}
    
    # Go through every codon in the count table and convert them into amino acids 
    for seq in df['codon']:
        aa = codontab[seq]
        df.loc[df['codon'] == seq, 'amino_acid'] = aa
    
    # Merge rows that with same amino acid
    df_new = df.groupby('amino_acid')['counts'].sum().reset_index()

    return df_new

def main():

    # Input files are the codon counts files (.csv) generated by count_codons.py
    # If the number of input files is not equal to 3, then print out warning and exit the script
    if len(sys.argv) != 3:
        print("Usage: make_barplot_aa.py  <codon_counts_csv_1> <codon_counts_csv_2>")
        sys.exit(1)

    # Apply convert_codon function to the first and second input files 
    inputfile_1 = sys.argv[1]
    inputfile_2 = sys.argv[2]
    whole = convert_codon(inputfile_1)
    separate = convert_codon(inputfile_2)

    # Add a new column 'group' to two dataframes
    whole = whole.assign(group = 'Whole genome (random frame shift)')
    separate = separate.assign(group = 'Coding sequences (correct frame shift)')
    
    # Sort the amino acid based on the count in 'separate' dataframe
    sorted_aa = separate.sort_values(by = 'counts', ascending = False)['amino_acid']
    
    # Concatenate whole and separate files along rows
    df = pd.concat([whole, separate], axis = 0)
    
    # Create a figure with a size of 24x8
    plt.figure(figsize = (12, 12))
    
    # Set the larger font scale
    sns.set(font_scale = 1.5)
    
    # Create a bar plot
    sns.barplot(x = 'amino_acid', y = 'counts', hue = 'group', data = df, order = sorted_aa)
    
    # Rotate the x-axis labels by 90 degrees
    plt.xticks(rotation = 90)
    
    # Add a legend to the upper right corner of the plot
    plt.legend(loc = 'upper right')
    
    # Save the plot as a pdf file
    plt.savefig("amino_acid_barplot.pdf", format = 'pdf')

if __name__ == "__main__":
    main()
